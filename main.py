import telebot
import requests
from bs4 import BeautifulSoup
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

class FoodParserBotApp:

    def __init__(self, api_token, target_channel_id, users):
        self.api_token = api_token
        self.target_channel_id = target_channel_id
        self.users = users
        self.message_text = ""

        self.bot = telebot.TeleBot(self.api_token)

        self.bot.message_handler(commands=['start'])(self.send_welcome)
        self.bot.message_handler(content_types=['text'])(self.handle_text)
        self.bot.callback_query_handler(func=lambda call: True)(self.handle_query)

    # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É, –¥–æ—Å—Ç–∞–µ—Ç –∏–∑ –Ω–µ–µ title –∏ description
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ –ù–∞–∑–≤–∞–Ω–∏–µ: title, –û–ø–∏—Å–∞–Ω–∏–µ: description, –°—Å—ã–ª–∫–∞: URL
    def get_preview_text(self, url):
        try:
            response = requests.get(url)
            response.raise_for_status()

            result = ""

            soup = BeautifulSoup(response.content, 'html.parser')
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ
            title = soup.find('meta', attrs={'name': 'title'})
            description = soup.find('meta', attrs={'name': 'description'})
            if title and title.get('content'):
                result += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title['content']}\n"
                if description and description.get('content'):
                    result += f"–û–ø–∏—Å–∞–Ω–∏–µ: {description['content']}\n"
                result += f"–°—Å—ã–ª–∫–∞: {url}"
                return result

            return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä."
        except requests.RequestException as e:
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}"

    def send_welcome(self, message):
        sender_id = message.from_user.id
        if sender_id not in self.users:
            self.bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π")
            return
        self.bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç!\n"
                              "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ—Ü–µ–ø—Çü§ó")
        return

    def handle_text(self, message):
        sender_id = message.from_user.id
        if sender_id not in self.users:
            self.bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π")
            return

        self.bot.reply_to(message, "üîç –°–∫–∞–Ω–∏—Ä—É—é —Å—Å—ã–ª–∫—É...")

        url = message.text
        preview_text = self.get_preview_text(url)
        self.message_text = preview_text

        markup = InlineKeyboardMarkup()
        yes_button = InlineKeyboardButton('‚úÖ–î–∞', callback_data='yes')
        no_button = InlineKeyboardButton('‚ùå–ù–µ—Ç', callback_data='no')
        markup.add(yes_button, no_button)

        self.bot.reply_to(message, text=self.message_text)
        self.bot.send_message(message.chat.id, "–•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ?", reply_markup=markup)

    def handle_query(self, call):
        if call.data == 'yes':
            self.bot.send_message(chat_id=self.target_channel_id, text=self.message_text)
            self.bot.send_message(call.message.chat.id, '‚úÖ–ì–æ—Ç–æ–≤–æ! –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ –†–µ—Ü–µ–ø—Ç—ã ü•òüçùüç≤')
            self.bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        elif call.data == 'no':
            self.bot.send_message(call.message.chat.id, '–•–æ—Ä–æ—à–æ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –Ω–∞–∂–º–∏ –Ω–∞ "–î–∞".')

    def start(self):
        self.bot.polling()

if __name__ == "__main__":
    API_TOKEN = "token"
    TARGET_CHANNEL_ID = -1 # channel where bot posts the messages
    USERS = {11111111111, # first allowed user id
             22222222222} # second allowed user id
    telegram_bot = FoodParserBotApp(API_TOKEN, TARGET_CHANNEL_ID, USERS)
    telegram_bot.start()

